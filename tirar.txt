var originalFileContent = " ";
var originalFileName = " ";
var origianlFileMD5 = "";
var origianlInfoView = true;

var newFileContent = " ";
var newFileMD5 = "";

var 

var pairsValues = "";
var changesCount = 0;
var csvData = "";


var blobData;
var offset = "0";
var fileLength = 0;


dropzone : 
fileInput : 
filename : 
filelength : 
md5 : 
offset-group : 
offsetDEC : 
offset : 
csv : 
changes : 
values : 
download_link : 
md5HashView : 
md5Hash : 
file-content : 





      function handleFileSelect(event) {
        event.stopPropagation();
        event.preventDefault();
        var files = event.target.files || event.dataTransfer.files;
        if (files.length > 0) {
          var file = files[0];
          originalFileName = files[0].name;
          var reader = new FileReader();
          reader.onload = function (event) {
            originalFileContent = event.target.result;
            // ------ Calculations
            fileLength = originalFileContent.length;
            origianlmd5Hash = CryptoJS.MD5(originalFileContent).toString();
            newFileContent = originalFileContent;
            updateFileInfoView();
            GenerateNewFile();


            document.getElementById("file-content").innerHTML =
              originalFileContent;
            document.getElementById("md5").innerHTML = origianlmd5Hash;
            document.getElementById("filename").innerHTML = originalFileName;

            document.getElementById("filelength").innerHTML = fileLength;
            document.getElementById("csv").removeAttribute("hidden");
            document.getElementById("offset-group").removeAttribute("hidden");

            generateNewFile(document.getElementById("values").value); //-----------------
          };
          reader.readAsText(file);
        }
      }

      function setCharAt(str, index, data, offset = 0) {
        if (index - offset > str.length - 1) return str;
        return (
          str.substring(0, index - offset) +
          String.fromCharCode(data) +
          str.substring(index - offset + 1)
        );
      }

      function generateNewFile(str) {
        var pairIndex;
        var pairData;
        newFileContent = originalFileContent;

        const lines = str.split(/\r?\n/); // Split string into array of lines
        const hexPairRegex = /^[0-9a-fA-F]*(?:[,:;-])[0-9a-fA-F]{1,2}$/; // Regex for hex pairs separated by comma
        newChangesCount = 0;
        for (let i = 0; i < lines.length; i++) {
          const line = lines[i].replace(/\s/g, ""); // Remove all whitespace from line

          if (hexPairRegex.test(line)) {
            pairIndex = Number("0x" + line.split(/[,:;-]/)[0]) - offset;
            pairData = Number("0x" + line.split(/[,:;-]/)[1]);
            if (pairIndex >= 0 && pairIndex < newFileContent.length) {
              newChangesCount++;
              newFileContent = setCharAt(newFileContent, pairIndex, pairData, 0);
            }
          }
        }
      }
      // ---------------- VALUES INPUT EVENT
      document.getElementById("values").oninput = () => {
        generateNewFile(document.getElementById("values").value);
      };

      // ---------------- OFFSET INPUT EVENT
      document.getElementById("offset").oninput = () => {
        offset = Number("0x" + document.getElementById("offset").value);
        if (isNaN(offset)) offset = 0;
        document.getElementById("offsetDEC").innerHTML = offset;
        generateNewFile(document.getElementById("values").value);
      };